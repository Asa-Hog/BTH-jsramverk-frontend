[{"C:\\Users\\asa_h\\Desktop\\bth\\jsramverk\\frontend\\texteditor\\src\\index.js":"1","C:\\Users\\asa_h\\Desktop\\bth\\jsramverk\\frontend\\texteditor\\src\\App.js":"2","C:\\Users\\asa_h\\Desktop\\bth\\jsramverk\\frontend\\texteditor\\src\\reportWebVitals.js":"3","C:\\Users\\asa_h\\Desktop\\bth\\jsramverk\\frontend\\texteditor\\src\\components\\Header.js":"4","C:\\Users\\asa_h\\Desktop\\bth\\jsramverk\\frontend\\texteditor\\src\\components\\Editor.js":"5","C:\\Users\\asa_h\\Desktop\\bth\\jsramverk\\frontend\\texteditor\\src\\models\\docs.js":"6"},{"size":589,"mtime":1661956780177,"results":"7","hashOfConfig":"8"},{"size":269,"mtime":1659967091409,"results":"9","hashOfConfig":"8"},{"size":362,"mtime":499162500000,"results":"10","hashOfConfig":"8"},{"size":151,"mtime":1661263135162,"results":"11","hashOfConfig":"8"},{"size":5218,"mtime":1662024504244,"results":"12","hashOfConfig":"8"},{"size":3196,"mtime":1661344797344,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","suppressedMessages":"16","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"hnduux",{"filePath":"17","messages":"18","suppressedMessages":"19","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"20","messages":"21","suppressedMessages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},{"filePath":"24","messages":"25","suppressedMessages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"27","messages":"28","suppressedMessages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30"},{"filePath":"31","messages":"32","suppressedMessages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34"},"C:\\Users\\asa_h\\Desktop\\bth\\jsramverk\\frontend\\texteditor\\src\\index.js",[],[],"C:\\Users\\asa_h\\Desktop\\bth\\jsramverk\\frontend\\texteditor\\src\\App.js",[],[],"C:\\Users\\asa_h\\Desktop\\bth\\jsramverk\\frontend\\texteditor\\src\\reportWebVitals.js",[],[],[],"C:\\Users\\asa_h\\Desktop\\bth\\jsramverk\\frontend\\texteditor\\src\\components\\Header.js",[],[],"C:\\Users\\asa_h\\Desktop\\bth\\jsramverk\\frontend\\texteditor\\src\\components\\Editor.js",["35","36","37","38","39","40"],[],"import React, { useState, useEffect, useRef } from 'react';\n// import ReactHtmlParser from 'react-html-parser';\nimport { TrixEditor } from \"react-trix\";\n\n// import \"trix\";\nimport \"trix/dist/trix.css\";\n\nimport docsModel from '../models/docs';\n\nconst Editor = () => {\n    let [data, setData] = useState('');\n    const [docs, setDocs] = useState([]);\n    const [currentDoc, setCurrentDoc] = useState({});\n    // const trixRef = useRef(null);\n    // const myRef = React.createRef();\n\n    useEffect(() => {\n        (async () => {\n            const allDocs = await docsModel.getAllDocs();\n            setDocs(allDocs);\n        })();\n    }, [currentDoc]);\n\n    let fetchDoc = () => {\n        // console.log(\"hämta valt dokument och visa det i editorn\");\n        // console.log(\"och spara det i currentDoc??\");\n        // var docId = document.getElementById(\"selectDoc\").value;\n        // console.log(docs[docId]);\n        // Skriv ut i editorn - UPPDATERA DATA I EDITORN AUTOMATISKT\n\n        // Hämta värde ur selectlista\n        let selectedDocId = document.getElementById(\"selectDoc\").value;\n        let chosenDoc = docs[selectedDocId];\n        console.log(\"Chosen doc\", chosenDoc);\n        // editor = chosenDoc.html;\n\n        // Från början är currentDoc {} och data \"\"\n\n        // setCurrentDoc(chosenDoc); // Sätter currentDoc till valt dokument\n        setCurrentDoc(chosenDoc);\n        console.log(\"Current doc: \", currentDoc);\n\n        setData(chosenDoc.html);\n        console.log(\"data: \", data); // Sätter data till valt dokuments data\n \n        // setCurrentDoc(chosenDoc); // när jag sätter detta uppdateras sidan\n        // - då blir currentDoc {} igen - NEJ, har ju precis ändrat värdet. Sidan uppdateras bara\n    }\n\n    const printData = () => { \n        // console.log(\"skriv ut i konsollen\");\n        // if (ReactHtmlParser(data)[0].props !== undefined) {\n        //     console.log( ReactHtmlParser(data)[0].props.children ); // ger en array med objekt i\n        // }\n        // for (let row in  ReactHtmlParser(data)[0].props.children[row]) {\n            // \\filtrera ut element (br mm ?\n        //     console.log(row);\n        // }\n        if (data !== undefined) {\n            console.log(data);\n        };\n    };\n\n    const createObject = async () => {\n        // doc = {_id: 123456, name: \"hej\", html: data};\n        // öppna ett formulär där man får fylla i namn? / \n        // inte ha med namn när dokument skapas utan ta med det när man vill spara sen? \n        //??????????????????????????????????????????????? name = ?????????\n        // Objektet får ett id som response efter detta\n        let doc = {html: data};\n        await docsModel.create(doc);\n    };\n\n    const updateObject = async () => { \n        // VILKET ID VILL VI UPPDATERA -\n        // OBJEKTET SOM VALTS I SELECTLISTAN - FETCHOBJECT\n        let doc = {html: data};\n        // let doc = {html: \"EJ UNDEF DATA\"};\n        await docsModel.update(doc);\n    };\n\n    const saveObject = () => { \n        console.log( \"spara objekt\" );\n    };\n\n    // let handleEditor = (e, editor) => { \n    //     // setData(editor.getData());\n    //     setData(\"nytt\");\n    // }\n\n    // handleEditorReady(editor) {\n    //     // this is a reference back to the editor if you want to\n    //     // do editing programatically\n    //     editor.insertString(\"editor is ready\");\n    //   };\n\n\n    let onChange = (event, newValue) => { \n        // console.log(event); // hela html\n        // console.log(event.target); // De använde event.target.value\n        // console.log(newValue);\n        // setData(newValue);\n        setData(event);\n    }\n\n    let onEditorReady = (event, editor) => {\n        console.log(\"behövs?\");\n        // console.log(\"hej\", editor);\n        // trixRef.innerHTML = data;\n        // return;\n    }\n\n    return (\n        <div className = \"editor\">\n            {/* <h1> Text editor </h1> */}\n\n            <trix-toolbar id = \"trix-toolbar\">\n\n\n                <button onClick = {()=> printData() }> Save </button>\n                {/* <select id = \"selectDoc\" onChange = { fetchDoc }>\n                    <option value = \"-99\" key = \"0\"> Choose a document </option>\n                    {docs.map((doc, index) => <option value = {index} key = {index}> {doc.name} </option>)}\n                </select> */}\n\n                {/* <button onClick = {()=> createObject() }> Create </button> */}\n                {/* <button onClick = {()=> updateObject() }> Update </button> */}\n                {/* <button onClick = {()=> saveObject() }> Save </button> */}\n\n            </trix-toolbar>\n\n\n            <TrixEditor id = \"trixEditorContent\" className = \"trix-editor\" toolbar = \"trix-toolbar\"\n                // editor = {TrixEditor}\n                // onEditorReady = { onEditorReady }\n                // onEditorReady = {(event, editor) => {onEditorReady(event, editor) }}\n                // onChange = {(event, editor) => {onChange(event, editor) }}\n                onChange = { onChange } \n                // ref = { trixRef }\n                value = { data }\n                // input = 'react-trix-editor'\n            >\n                { data }\n\n            </TrixEditor>\n        </div>\n    )\n}\n\nexport default Editor\n","C:\\Users\\asa_h\\Desktop\\bth\\jsramverk\\frontend\\texteditor\\src\\models\\docs.js",["41"],[],"const docs = {\n    // setCurrentDoc: async function getAllDocs() {\n    //     let a = `${URL}/docs`;\n    //     // console.log(\"hello world\");\n    //     // console.log(\"url is: \" + a);\n    //     // // const response = await fetch(`${URL}/docs`); // Hämtar allt som ligger bakom url/docs\n    //     const response = await fetch(\"http://localhost:1337/docs\");//Fetch ger sträng\n    //     // // Får inte fram rätt url från två rader upp\n\n    //     const result = await response.json(); // Gör om sträng till json\n\n    //     console.log(result);\n    //     // console.log(result.data);\n\n    //     // // return result.data; // Skriver jag in detta som det ska vara får jag undefined\n    //     return result;\n    // },\n\n    getAllDocs: async function getAllDocs() {\n        let a = `${URL}/docs`;\n        // console.log(\"hello world\");\n        // console.log(\"url is: \" + a);\n        // // const response = await fetch(`${URL}/docs`); // Hämtar allt som ligger bakom url/docs\n        const response = await fetch(\"http://localhost:1337/docs\");//Fetch ger sträng\n        // // Får inte fram rätt url från två rader upp\n\n        const result = await response.json(); // Gör om sträng till json\n\n        console.log(result);\n        // console.log(result.data);\n\n        // // return result.data; // Skriver jag in detta som det ska vara får jag undefined\n        return result;\n    },\n\n    create: async function create(doc) {\n        // const response = await fetch(`${URL}/create`);\n        const response = await fetch(\"http://localhost:1337/create\",\n            { \n                method: \"POST\",\n                headers: {'Content-Type': 'application/json'},\n                body: JSON.stringify(doc)\n            }\n        );\n\n        // Response är det jag får från backend /create. I det här fallet ett objekt m ett nytt id\n        console.log(response);\n        const result = await response.json(); // Gör om sträng till json\n        console.log(result);\n\n        // Gör en koll så response/result status blev 201 - dvs att dokumentet skapades\n        // console.log(result.result.ops); //undefined - ger error\n        //  if (result.result.ok) {\n        //     return res.status(201).json({ data: result.ops });\n        // }\n        // return result.data; // Skriver jag in detta som det ska vara får jag undefined\n\n        // Göra nåt med id:t jag får tillbaka?\n\n        return result;\n    },\n\n    update: async function update(doc) {\n        // const response = await fetch(`${URL}/update/:id`);\n        const response = await fetch(\"http://localhost:1337/update\",\n            { \n                method: \"PUT\",\n                headers: {\"Content-Type\": \"application/json\"},\n                // headers: {'Content-Type': 'Access-Control-Allow-Origin'},\n                // headers: {\"Content-type\": \"application/x-www-form-urlencoded\"},\n                body: JSON.stringify(doc)\n            }\n        );\n\n        console.log(response); // Response jag får är fel\n        const result = await response.json(); // Gör om response till json\n        console.log(result); // Tomt, pga att response är fel\n        return result;\n    }\n};\n\nexport default docs;\n",{"ruleId":"42","severity":1,"message":"43","line":1,"column":38,"nodeType":"44","messageId":"45","endLine":1,"endColumn":44},{"ruleId":"42","severity":1,"message":"46","line":24,"column":9,"nodeType":"44","messageId":"45","endLine":24,"endColumn":17},{"ruleId":"42","severity":1,"message":"47","line":64,"column":11,"nodeType":"44","messageId":"45","endLine":64,"endColumn":23},{"ruleId":"42","severity":1,"message":"48","line":74,"column":11,"nodeType":"44","messageId":"45","endLine":74,"endColumn":23},{"ruleId":"42","severity":1,"message":"49","line":82,"column":11,"nodeType":"44","messageId":"45","endLine":82,"endColumn":21},{"ruleId":"42","severity":1,"message":"50","line":106,"column":9,"nodeType":"44","messageId":"45","endLine":106,"endColumn":22},{"ruleId":"42","severity":1,"message":"51","line":20,"column":13,"nodeType":"44","messageId":"45","endLine":20,"endColumn":14},"no-unused-vars","'useRef' is defined but never used.","Identifier","unusedVar","'fetchDoc' is assigned a value but never used.","'createObject' is assigned a value but never used.","'updateObject' is assigned a value but never used.","'saveObject' is assigned a value but never used.","'onEditorReady' is assigned a value but never used.","'a' is assigned a value but never used."]