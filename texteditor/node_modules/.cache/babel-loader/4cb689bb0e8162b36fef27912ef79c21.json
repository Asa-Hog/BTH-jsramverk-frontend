{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\asa_h\\\\Desktop\\\\bth\\\\jsramverk\\\\frontend\\\\texteditor\\\\src\\\\components\\\\Editor.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react'; // import ReactHtmlParser from 'react-html-parser';\n\nimport { TrixEditor } from \"react-trix\"; // import \"trix\";\n\nimport \"trix/dist/trix.css\";\nimport docsModel from '../models/docsModel';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Editor = () => {\n  _s();\n\n  let [data, setData] = useState('');\n  const [docs, setDocs] = useState([]);\n  const [currentDoc, setCurrentDoc] = useState({});\n  useEffect(() => {\n    (async () => {\n      const allDocs = await docsModel.getAllDocs();\n      setDocs(allDocs);\n    })();\n  }, [currentDoc]);\n\n  const printData = () => {\n    // console.log(\"skriv ut i konsollen\");\n    // if (ReactHtmlParser(data)[0].props !== undefined) {\n    //     console.log( ReactHtmlParser(data)[0].props.children ); // ger en array med objekt i\n    // }\n    // for (let row in  ReactHtmlParser(data)[0].props.children[row]) {\n    // \\filtrera ut element (br mm ?\n    //     console.log(row);\n    // }\n    if (data !== undefined) {\n      console.log(data);\n    }\n\n    ;\n  };\n\n  let setCurrentDocument = () => {\n    // Hämta värde ur selectlista\n    let selectedDocId = document.getElementById(\"selectDoc\").value;\n    let selectedDoc = docs[selectedDocId];\n    setCurrentDoc(selectedDoc);\n    console.log(\"Selected doc\", selectedDoc);\n  };\n\n  const createObject = async () => {\n    let newDoc = {};\n    newDoc.html = data; // console.log(\"newDoc\", newDoc);\n\n    await docsModel.create(newDoc);\n  };\n\n  const updateObject = async () => {\n    currentDoc.html = data; // Ändrar html för currentDoc till det som står i editorn\n\n    await docsModel.update(currentDoc);\n  };\n\n  const saveObject = () => {\n    console.log(\"spara objekt\");\n  }; // let handleEditor = (e, editor) => { \n  //     // setData(editor.getData());\n  //     setData(\"nytt\");\n  // }\n  // handleEditorReady(editor) {\n  //     // this is a reference back to the editor if you want to\n  //     // do editing programatically\n  //     editor.insertString(\"editor is ready\");\n  //   };\n\n\n  let onChange = event => {\n    setData(event);\n  }; // console.log(event); // hela html\n  // console.log(event.target); // De använde event.target.value\n  // function setEditorContent(content, triggerChange) {\n\n\n  function setEditorContent(content, triggerChange) {\n    console.log(\"set editor content\"); //     let element = document.querySelector(\"trix-editor\");\n    //     element.value = \"\";\n    //     element.editor.setSelectedRange([0, 0]);\n    //     element.editor.insertHTML(content);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"editor\",\n    children: [/*#__PURE__*/_jsxDEV(\"trix-toolbar\", {\n      id: \"trix-toolbar\",\n      children: [/*#__PURE__*/_jsxDEV(\"select\", {\n        id: \"selectDoc\",\n        onChange: setCurrentDocument && setEditorContent,\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"-99\",\n          children: \" Choose a document \"\n        }, \"0\", false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 21\n        }, this), docs.map((doc, index) => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: index,\n          children: [\" \", doc.name, \" \"]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 47\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => createObject(),\n        children: \" Create \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => updateObject(),\n        children: \" Update \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(TrixEditor, {\n      id: \"trixEditorContent\",\n      className: \"trix-editor\",\n      toolbar: \"trix-toolbar\" // editor = {TrixEditor}\n      // onEditorReady = { onEditorReady }\n      // onEditorReady = {(event, editor) => {onEditorReady(event, editor) }}\n      // onChange = {(event, editor) => {onChange(event, editor) }}\n      ,\n      onChange: onChange // onChange={props.change}\n      // ref = { trixRef }\n      ,\n      value: data // input = 'react-trix-editor'\n      ,\n      autoFocus: true // default={props.default}\n      ,\n      children: \"...data.html\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 91,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Editor, \"483za1sjxoWF5S2uJ9w8dIO+oF4=\");\n\n_c = Editor;\nexport default Editor;\n\nvar _c;\n\n$RefreshReg$(_c, \"Editor\");","map":{"version":3,"names":["React","useState","useEffect","TrixEditor","docsModel","Editor","data","setData","docs","setDocs","currentDoc","setCurrentDoc","allDocs","getAllDocs","printData","undefined","console","log","setCurrentDocument","selectedDocId","document","getElementById","value","selectedDoc","createObject","newDoc","html","create","updateObject","update","saveObject","onChange","event","setEditorContent","content","triggerChange","map","doc","index","name"],"sources":["C:/Users/asa_h/Desktop/bth/jsramverk/frontend/texteditor/src/components/Editor.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\n// import ReactHtmlParser from 'react-html-parser';\nimport { TrixEditor } from \"react-trix\";\n// import \"trix\";\nimport \"trix/dist/trix.css\";\n\nimport docsModel from '../models/docsModel';\n\nconst Editor = () => {\n    let [data, setData] = useState('');\n    const [docs, setDocs] = useState([]);\n    const [currentDoc, setCurrentDoc] = useState({});\n\n    useEffect(() => {\n        (async () => {\n            const allDocs = await docsModel.getAllDocs();\n            setDocs(allDocs);\n        })();\n    }, [currentDoc]);\n\n\n    const printData = () => { \n        // console.log(\"skriv ut i konsollen\");\n        // if (ReactHtmlParser(data)[0].props !== undefined) {\n        //     console.log( ReactHtmlParser(data)[0].props.children ); // ger en array med objekt i\n        // }\n        // for (let row in  ReactHtmlParser(data)[0].props.children[row]) {\n            // \\filtrera ut element (br mm ?\n        //     console.log(row);\n        // }\n        if (data !== undefined) {\n            console.log(data);\n        };\n    };\n\n    let setCurrentDocument = () => {\n        // Hämta värde ur selectlista\n        let selectedDocId = document.getElementById(\"selectDoc\").value;\n        let selectedDoc = docs[selectedDocId];\n\n        setCurrentDoc(selectedDoc);\n\n        console.log(\"Selected doc\", selectedDoc);\n     }\n\n    const createObject = async () => {\n        let newDoc = {};\n        newDoc.html = data;\n        // console.log(\"newDoc\", newDoc);\n        await docsModel.create(newDoc);\n    };\n\n    const updateObject = async () => { \n        currentDoc.html = data; // Ändrar html för currentDoc till det som står i editorn\n\n        await docsModel.update(currentDoc);\n    };\n\n    const saveObject = () => { \n        console.log( \"spara objekt\" );\n    };\n\n    // let handleEditor = (e, editor) => { \n    //     // setData(editor.getData());\n    //     setData(\"nytt\");\n    // }\n\n    // handleEditorReady(editor) {\n    //     // this is a reference back to the editor if you want to\n    //     // do editing programatically\n    //     editor.insertString(\"editor is ready\");\n    //   };\n\n    let onChange = (event) => { \n        setData(event);\n    }\n\n    // console.log(event); // hela html\n    // console.log(event.target); // De använde event.target.value\n    // function setEditorContent(content, triggerChange) {\n    function setEditorContent(content, triggerChange) {\n        console.log(\"set editor content\");\n    //     let element = document.querySelector(\"trix-editor\");\n    \n    //     element.value = \"\";\n    //     element.editor.setSelectedRange([0, 0]);\n    //     element.editor.insertHTML(content);\n    }\n\n    return (\n        <div className = \"editor\">\n\n            <trix-toolbar id = \"trix-toolbar\">\n                <select id = \"selectDoc\" onChange = { setCurrentDocument && setEditorContent }>\n                    <option value = \"-99\" key = \"0\"> Choose a document </option>\n                    {docs.map((doc, index) => <option value = {index} key = {index}> {doc.name} </option>)}\n                </select>\n\n                <button onClick = {()=> createObject() }> Create </button>\n                <button onClick = {()=> updateObject() }> Update </button>\n                {/* <button onClick = {()=> saveObject() }> Save </button> */}\n            </trix-toolbar>\n\n\n            <TrixEditor id = \"trixEditorContent\" className = \"trix-editor\" toolbar = \"trix-toolbar\"\n                // editor = {TrixEditor}\n                // onEditorReady = { onEditorReady }\n                // onEditorReady = {(event, editor) => {onEditorReady(event, editor) }}\n                // onChange = {(event, editor) => {onChange(event, editor) }}\n                onChange = { onChange } \n                // onChange={props.change}\n                // ref = { trixRef }\n                value = { data }\n                // input = 'react-trix-editor'\n                autoFocus={true}\n                // default={props.default}\n            >\n                 ...data.html \n\n            </TrixEditor>\n        </div>\n    )\n}\n\nexport default Editor\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}