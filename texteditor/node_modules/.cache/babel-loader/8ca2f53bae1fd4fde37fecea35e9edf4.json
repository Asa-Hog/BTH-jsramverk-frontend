{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\asa_h\\\\Desktop\\\\bth\\\\jsramverk\\\\frontend\\\\texteditor\\\\src\\\\components\\\\Editor.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react'; // import ReactHtmlParser from 'react-html-parser';\n\nimport { TrixEditor } from \"react-trix\"; // import \"trix\";\n\nimport \"trix/dist/trix.css\";\nimport docsModel from '../models/docsModel';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Editor = () => {\n  _s();\n\n  let [data, setData] = useState('');\n  const [docs, setDocs] = useState([]);\n  const [currentDoc, setCurrentDoc] = useState({});\n  useEffect(() => {\n    (async () => {\n      const allDocs = await docsModel.getAllDocs();\n      setDocs(allDocs);\n    })();\n  }, [currentDoc]); // const printData = () => { \n  //     // console.log(\"skriv ut i konsollen\");\n  //     // if (ReactHtmlParser(data)[0].props !== undefined) {\n  //     //     console.log( ReactHtmlParser(data)[0].props.children ); // ger en array med objekt i\n  //     // }\n  //     // for (let row in  ReactHtmlParser(data)[0].props.children[row]) {\n  //         // \\filtrera ut element (br mm ?\n  //     //     console.log(row);\n  //     // }\n  //     if (data !== undefined) {\n  //         console.log(data);\n  //     };\n  // };\n\n  let handleSelectedDoc = () => {\n    // Hämta värde ur selectlista\n    let selectedDocId = document.getElementById(\"selectDoc\").value;\n    let selectedDoc = docs[selectedDocId];\n    setCurrentDoc(selectedDoc);\n    console.log(selectedDoc);\n\n    if (selectedDoc !== undefined) {\n      setEditorContent(selectedDoc);\n    }\n  }; // console.log(event); // hela html\n  // console.log(event.target); // De använde event.target.value\n  // function setEditorContent(content, triggerChange) {\n\n\n  function setEditorContent(selectedDoc) {\n    let element = document.querySelector(\"trix-editor\"); // let element = document.getElementById(\"selectDoc\"); // element.editor is undefined med denna, men ej ovanstående element som är samma sak\n\n    element.value = \"\"; // element.editor.setSelectedRange([0, 0]);\n\n    element.editor.insertHTML(selectedDoc.html); // selectedDoc.innerHTML = \"hej\";\n  }\n\n  ;\n\n  const resetDb = async () => {\n    await docsModel.reset();\n  };\n\n  const createObject = async () => {\n    alert(\"Ange filnamn\");\n    let newDoc = {};\n    newDoc.html = data; // console.log(\"newDoc\", newDoc);\n\n    await docsModel.create(newDoc);\n  };\n\n  const updateObject = async () => {\n    console.log(currentDoc);\n\n    if (currentDoc == {}) {\n      alert(\"Please choose a file to update\");\n    } else {\n      currentDoc.html = data; // Ändrar html för currentDoc till det som står i editorn\n\n      await docsModel.update(currentDoc);\n    }\n  }; // const saveObject = () => { \n  //     console.log( \"spara objekt\" );\n  // };\n  // let handleEditor = (e, editor) => { \n  //     // setData(editor.getData());\n  //     setData(\"nytt\");\n  // }\n  // handleEditorReady(editor) {\n  //     // this is a reference back to the editor if you want to\n  //     // do editing programatically\n  //     editor.insertString(\"editor is ready\");\n  //   };\n\n\n  let onChange = event => {\n    setData(event);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"editor\",\n    children: [/*#__PURE__*/_jsxDEV(\"trix-toolbar\", {\n      id: \"trix-toolbar\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => resetDb(),\n        children: \" Reset \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        id: \"selectDoc\",\n        onChange: handleSelectedDoc,\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"-99\",\n          children: \" Choose a document \"\n        }, \"0\", false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 21\n        }, this), docs.map((doc, index) => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: index,\n          children: [\" \", doc.name, \" \"]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 47\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => createObject(),\n        children: \" Create \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => updateObject(),\n        children: \" Update \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(TrixEditor, {\n      id: \"trixEditorContent\",\n      className: \"trix-editor\",\n      toolbar: \"trix-toolbar\" // editor = {TrixEditor}\n      // onEditorReady = { onEditorReady }\n      // onEditorReady = {(event, editor) => {onEditorReady(event, editor) }}\n      ,\n      onChange: onChange // onChange={props.change}\n      // ref = { trixRef }\n      // value = { data }\n      // input = 'react-trix-editor'\n      // autoFocus={true}\n      // default={props.default}\n\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 102,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Editor, \"483za1sjxoWF5S2uJ9w8dIO+oF4=\");\n\n_c = Editor;\nexport default Editor;\n\nvar _c;\n\n$RefreshReg$(_c, \"Editor\");","map":{"version":3,"names":["React","useState","useEffect","TrixEditor","docsModel","Editor","data","setData","docs","setDocs","currentDoc","setCurrentDoc","allDocs","getAllDocs","handleSelectedDoc","selectedDocId","document","getElementById","value","selectedDoc","console","log","undefined","setEditorContent","element","querySelector","editor","insertHTML","html","resetDb","reset","createObject","alert","newDoc","create","updateObject","update","onChange","event","map","doc","index","name"],"sources":["C:/Users/asa_h/Desktop/bth/jsramverk/frontend/texteditor/src/components/Editor.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\n// import ReactHtmlParser from 'react-html-parser';\nimport { TrixEditor } from \"react-trix\";\n// import \"trix\";\nimport \"trix/dist/trix.css\";\n\nimport docsModel from '../models/docsModel';\n\nconst Editor = () => {\n    let [data, setData] = useState('');\n    const [docs, setDocs] = useState([]);\n    const [currentDoc, setCurrentDoc] = useState({});\n\n    useEffect(() => {\n        (async () => {\n            const allDocs = await docsModel.getAllDocs();\n            setDocs(allDocs);\n        })();\n    }, [currentDoc]);\n\n    // const printData = () => { \n    //     // console.log(\"skriv ut i konsollen\");\n    //     // if (ReactHtmlParser(data)[0].props !== undefined) {\n    //     //     console.log( ReactHtmlParser(data)[0].props.children ); // ger en array med objekt i\n    //     // }\n    //     // for (let row in  ReactHtmlParser(data)[0].props.children[row]) {\n    //         // \\filtrera ut element (br mm ?\n    //     //     console.log(row);\n    //     // }\n    //     if (data !== undefined) {\n    //         console.log(data);\n    //     };\n    // };\n\n    let handleSelectedDoc = () => {\n        // Hämta värde ur selectlista\n        let selectedDocId = document.getElementById(\"selectDoc\").value;\n        let selectedDoc = docs[selectedDocId];\n\n        setCurrentDoc(selectedDoc);\n        console.log(selectedDoc);\n\n        if (selectedDoc !== undefined) {\n            setEditorContent(selectedDoc);\n        }\n     };\n\n    // console.log(event); // hela html\n    // console.log(event.target); // De använde event.target.value\n    // function setEditorContent(content, triggerChange) {\n    function setEditorContent(selectedDoc) {\n        let element = document.querySelector(\"trix-editor\");\n        // let element = document.getElementById(\"selectDoc\"); // element.editor is undefined med denna, men ej ovanstående element som är samma sak\n            element.value = \"\";\n            // element.editor.setSelectedRange([0, 0]);\n            element.editor.insertHTML(selectedDoc.html);\n        // selectedDoc.innerHTML = \"hej\";\n};\n\n    const resetDb = async () => {\n        await docsModel.reset();\n    };\n\n    const createObject = async () => {\n        alert(\"Ange filnamn\");\n        let newDoc = {};\n        newDoc.html = data;\n        // console.log(\"newDoc\", newDoc);\n        await docsModel.create(newDoc);\n    };\n\n    const updateObject = async () => { \n        console.log(currentDoc);\n        if (currentDoc == {}) {\n            alert(\"Please choose a file to update\");\n        } else {\n            currentDoc.html = data; // Ändrar html för currentDoc till det som står i editorn\n        await docsModel.update(currentDoc);\n        }\n    };\n\n    // const saveObject = () => { \n    //     console.log( \"spara objekt\" );\n    // };\n\n    // let handleEditor = (e, editor) => { \n    //     // setData(editor.getData());\n    //     setData(\"nytt\");\n    // }\n\n    // handleEditorReady(editor) {\n    //     // this is a reference back to the editor if you want to\n    //     // do editing programatically\n    //     editor.insertString(\"editor is ready\");\n    //   };\n\n    let onChange = (event) => { \n        setData(event);\n    };\n\n    return (\n        <div className = \"editor\">\n\n            <trix-toolbar id = \"trix-toolbar\">\n\n                <button onClick = {()=> resetDb() }> Reset </button>\n                <select id = \"selectDoc\" onChange = { handleSelectedDoc } >\n                    <option value = \"-99\" key = \"0\"> Choose a document </option>\n                    {docs.map((doc, index) => <option value = {index} key = {index}> {doc.name} </option>)}\n                </select>\n\n                <button onClick = {()=> createObject() }> Create </button>\n                <button onClick = {()=> updateObject() }> Update </button>\n                {/* <button onClick = {()=> saveObject() }> Save </button> */}\n            </trix-toolbar>\n\n\n            <TrixEditor id = \"trixEditorContent\" className = \"trix-editor\" toolbar = \"trix-toolbar\"\n                // editor = {TrixEditor}\n                // onEditorReady = { onEditorReady }\n                // onEditorReady = {(event, editor) => {onEditorReady(event, editor) }}\n                onChange = { onChange } \n                // onChange={props.change}\n                // ref = { trixRef }\n                // value = { data }\n                // input = 'react-trix-editor'\n                // autoFocus={true}\n                // default={props.default}\n            />\n        </div>\n    )\n}\n\nexport default Editor\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}