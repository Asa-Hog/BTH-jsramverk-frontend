{"ast":null,"code":"import _regeneratorRuntime from\"C:/Users/asa_h/Desktop/bth/jsramverk/frontend/texteditor/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";import _asyncToGenerator from\"C:/Users/asa_h/Desktop/bth/jsramverk/frontend/texteditor/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";import _slicedToArray from\"C:/Users/asa_h/Desktop/bth/jsramverk/frontend/texteditor/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import React,{useState,useEffect,useRef}from'react';// import ReactHtmlParser from 'react-html-parser';\nimport{TrixEditor}from\"react-trix\";// import \"trix\";\nimport\"trix/dist/trix.css\";import docsModel from'../models/docs';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var Editor=function Editor(){var _useState=useState(''),_useState2=_slicedToArray(_useState,2),data=_useState2[0],setData=_useState2[1];var _useState3=useState([]),_useState4=_slicedToArray(_useState3,2),docs=_useState4[0],setDocs=_useState4[1];var _useState5=useState({}),_useState6=_slicedToArray(_useState5,2),currentDoc=_useState6[0],setCurrentDoc=_useState6[1];// const trixRef = useRef(null);\n// const myRef = React.createRef();\nuseEffect(function(){_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee(){var allDocs;return _regeneratorRuntime().wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return docsModel.getAllDocs();case 2:allDocs=_context.sent;setDocs(allDocs);case 4:case\"end\":return _context.stop();}}},_callee);}))();},[currentDoc]);var fetchDoc=function fetchDoc(){// console.log(\"hämta valt dokument och visa det i editorn\");\n// console.log(\"och spara det i currentDoc??\");\n// var docId = document.getElementById(\"selectDoc\").value;\n// console.log(docs[docId]);\n// Skriv ut i editorn - UPPDATERA DATA I EDITORN AUTOMATISKT\n// Hämta värde ur selectlista\nvar selectedDocId=document.getElementById(\"selectDoc\").value;var chosenDoc=docs[selectedDocId];console.log(\"Chosen doc\",chosenDoc);// editor = chosenDoc.html;\n// Från början är currentDoc {} och data \"\"\n// setCurrentDoc(chosenDoc); // Sätter currentDoc till valt dokument\nsetCurrentDoc(chosenDoc);console.log(\"Current doc: \",currentDoc);setData(chosenDoc.html);console.log(\"data: \",data);// Sätter data till valt dokuments data\n// setCurrentDoc(chosenDoc); // när jag sätter detta uppdateras sidan\n// - då blir currentDoc {} igen - NEJ, har ju precis ändrat värdet. Sidan uppdateras bara\n};var printData=function printData(){// console.log(\"skriv ut i konsollen\");\n// if (ReactHtmlParser(data)[0].props !== undefined) {\n//     console.log( ReactHtmlParser(data)[0].props.children ); // ger en array med objekt i\n// }\n// for (let row in  ReactHtmlParser(data)[0].props.children[row]) {\n// \\filtrera ut element (br mm ?\n//     console.log(row);\n// }\nif(data!==undefined){console.log(data);};};var createObject=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee2(){var doc;return _regeneratorRuntime().wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:// doc = {_id: 123456, name: \"hej\", html: data};\n// öppna ett formulär där man får fylla i namn? / \n// inte ha med namn när dokument skapas utan ta med det när man vill spara sen? \n//??????????????????????????????????????????????? name = ?????????\n// Objektet får ett id som response efter detta\ndoc={html:data};_context2.next=3;return docsModel.create(doc);case 3:case\"end\":return _context2.stop();}}},_callee2);}));return function createObject(){return _ref2.apply(this,arguments);};}();var updateObject=/*#__PURE__*/function(){var _ref3=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee3(){var doc;return _regeneratorRuntime().wrap(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:// VILKET ID VILL VI UPPDATERA -\n// OBJEKTET SOM VALTS I SELECTLISTAN - FETCHOBJECT\ndoc={html:data};// let doc = {html: \"EJ UNDEF DATA\"};\n_context3.next=3;return docsModel.update(doc);case 3:case\"end\":return _context3.stop();}}},_callee3);}));return function updateObject(){return _ref3.apply(this,arguments);};}();var saveObject=function saveObject(){console.log(\"spara objekt\");};// let handleEditor = (e, editor) => { \n//     // setData(editor.getData());\n//     setData(\"nytt\");\n// }\n// handleEditorReady(editor) {\n//     // this is a reference back to the editor if you want to\n//     // do editing programatically\n//     editor.insertString(\"editor is ready\");\n//   };\nvar onChange=function onChange(event,newValue){// console.log(event); // hela html\n// console.log(event.target); // De använde event.target.value\n// console.log(newValue);\n// setData(newValue);\nsetData(event);};var onEditorReady=function onEditorReady(event,editor){console.log(\"behövs?\");// console.log(\"hej\", editor);\n// trixRef.innerHTML = data;\n// return;\n};return/*#__PURE__*/_jsxs(\"div\",{className:\"editor\",children:[/*#__PURE__*/_jsx(\"trix-toolbar\",{id:\"trix-toolbar\",children:/*#__PURE__*/_jsx(\"button\",{onClick:function onClick(){return printData();},children:\" Save \"})}),/*#__PURE__*/_jsx(TrixEditor,{id:\"trixEditorContent\",className:\"trix-editor\",toolbar:\"trix-toolbar\"// editor = {TrixEditor}\n// onEditorReady = { onEditorReady }\n// onEditorReady = {(event, editor) => {onEditorReady(event, editor) }}\n// onChange = {(event, editor) => {onChange(event, editor) }}\n,onChange:onChange// ref = { trixRef }\n,value:data// input = 'react-trix-editor'\n,children:data})]});};export default Editor;","map":{"version":3,"names":["React","useState","useEffect","useRef","TrixEditor","docsModel","Editor","data","setData","docs","setDocs","currentDoc","setCurrentDoc","getAllDocs","allDocs","fetchDoc","selectedDocId","document","getElementById","value","chosenDoc","console","log","html","printData","undefined","createObject","doc","create","updateObject","update","saveObject","onChange","event","newValue","onEditorReady","editor"],"sources":["C:/Users/asa_h/Desktop/bth/jsramverk/frontend/texteditor/src/components/Editor.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\n// import ReactHtmlParser from 'react-html-parser';\nimport { TrixEditor } from \"react-trix\";\n\n// import \"trix\";\nimport \"trix/dist/trix.css\";\n\nimport docsModel from '../models/docs';\n\nconst Editor = () => {\n    let [data, setData] = useState('');\n    const [docs, setDocs] = useState([]);\n    const [currentDoc, setCurrentDoc] = useState({});\n    // const trixRef = useRef(null);\n    // const myRef = React.createRef();\n\n    useEffect(() => {\n        (async () => {\n            const allDocs = await docsModel.getAllDocs();\n            setDocs(allDocs);\n        })();\n    }, [currentDoc]);\n\n    let fetchDoc = () => {\n        // console.log(\"hämta valt dokument och visa det i editorn\");\n        // console.log(\"och spara det i currentDoc??\");\n        // var docId = document.getElementById(\"selectDoc\").value;\n        // console.log(docs[docId]);\n        // Skriv ut i editorn - UPPDATERA DATA I EDITORN AUTOMATISKT\n\n        // Hämta värde ur selectlista\n        let selectedDocId = document.getElementById(\"selectDoc\").value;\n        let chosenDoc = docs[selectedDocId];\n        console.log(\"Chosen doc\", chosenDoc);\n        // editor = chosenDoc.html;\n\n        // Från början är currentDoc {} och data \"\"\n\n        // setCurrentDoc(chosenDoc); // Sätter currentDoc till valt dokument\n        setCurrentDoc(chosenDoc);\n        console.log(\"Current doc: \", currentDoc);\n\n        setData(chosenDoc.html);\n        console.log(\"data: \", data); // Sätter data till valt dokuments data\n \n        // setCurrentDoc(chosenDoc); // när jag sätter detta uppdateras sidan\n        // - då blir currentDoc {} igen - NEJ, har ju precis ändrat värdet. Sidan uppdateras bara\n    }\n\n    const printData = () => { \n        // console.log(\"skriv ut i konsollen\");\n        // if (ReactHtmlParser(data)[0].props !== undefined) {\n        //     console.log( ReactHtmlParser(data)[0].props.children ); // ger en array med objekt i\n        // }\n        // for (let row in  ReactHtmlParser(data)[0].props.children[row]) {\n            // \\filtrera ut element (br mm ?\n        //     console.log(row);\n        // }\n        if (data !== undefined) {\n            console.log(data);\n        };\n    };\n\n    const createObject = async () => {\n        // doc = {_id: 123456, name: \"hej\", html: data};\n        // öppna ett formulär där man får fylla i namn? / \n        // inte ha med namn när dokument skapas utan ta med det när man vill spara sen? \n        //??????????????????????????????????????????????? name = ?????????\n        // Objektet får ett id som response efter detta\n        let doc = {html: data};\n        await docsModel.create(doc);\n    };\n\n    const updateObject = async () => { \n        // VILKET ID VILL VI UPPDATERA -\n        // OBJEKTET SOM VALTS I SELECTLISTAN - FETCHOBJECT\n        let doc = {html: data};\n        // let doc = {html: \"EJ UNDEF DATA\"};\n        await docsModel.update(doc);\n    };\n\n    const saveObject = () => { \n        console.log( \"spara objekt\" );\n    };\n\n    // let handleEditor = (e, editor) => { \n    //     // setData(editor.getData());\n    //     setData(\"nytt\");\n    // }\n\n    // handleEditorReady(editor) {\n    //     // this is a reference back to the editor if you want to\n    //     // do editing programatically\n    //     editor.insertString(\"editor is ready\");\n    //   };\n\n\n    let onChange = (event, newValue) => { \n        // console.log(event); // hela html\n        // console.log(event.target); // De använde event.target.value\n        // console.log(newValue);\n        // setData(newValue);\n        setData(event);\n    }\n\n    let onEditorReady = (event, editor) => {\n        console.log(\"behövs?\");\n        // console.log(\"hej\", editor);\n        // trixRef.innerHTML = data;\n        // return;\n    }\n\n    return (\n        <div className = \"editor\">\n            {/* <h1> Text editor </h1> */}\n\n            <trix-toolbar id = \"trix-toolbar\">\n\n\n                <button onClick = {()=> printData() }> Save </button>\n                {/* <select id = \"selectDoc\" onChange = { fetchDoc }>\n                    <option value = \"-99\" key = \"0\"> Choose a document </option>\n                    {docs.map((doc, index) => <option value = {index} key = {index}> {doc.name} </option>)}\n                </select> */}\n\n                {/* <button onClick = {()=> createObject() }> Create </button> */}\n                {/* <button onClick = {()=> updateObject() }> Update </button> */}\n                {/* <button onClick = {()=> saveObject() }> Save </button> */}\n\n            </trix-toolbar>\n\n\n            <TrixEditor id = \"trixEditorContent\" className = \"trix-editor\" toolbar = \"trix-toolbar\"\n                // editor = {TrixEditor}\n                // onEditorReady = { onEditorReady }\n                // onEditorReady = {(event, editor) => {onEditorReady(event, editor) }}\n                // onChange = {(event, editor) => {onChange(event, editor) }}\n                onChange = { onChange } \n                // ref = { trixRef }\n                value = { data }\n                // input = 'react-trix-editor'\n            >\n                { data }\n\n            </TrixEditor>\n        </div>\n    )\n}\n\nexport default Editor\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}