{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\asa_h\\\\Desktop\\\\bth\\\\jsramverk\\\\frontend\\\\texteditor\\\\src\\\\components\\\\Editor.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport ReactHtmlParser from 'react-html-parser'; // import ReactHtmlParser, { processNodes, convertNodeToElement, htmlparser2 } from 'react-html-parser';\n\nimport { TrixEditor } from \"react-trix\";\nimport docsModel from '../models/docs';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Editor = () => {\n  _s();\n\n  let [data, setData] = useState('');\n  const [docs, setDocs] = useState([]);\n  const [currentDoc, setCurrentDoc] = useState({});\n  const trixRef = useRef(null); // const myRef = React.createRef();\n\n  useEffect(() => {\n    (async () => {\n      const allDocs = await docsModel.getAllDocs();\n      setDocs(allDocs);\n    })();\n  }, [currentDoc]);\n\n  let fetchDoc = () => {\n    // console.log(\"hämta valt dokument och visa det i editorn\");\n    // var docId = document.getElementById(\"selectDoc\").value;\n    // console.log(docId);\n    // console.log(docs[docId]);\n    // console.log(docs[docId]._id);\n    // console.log(docs[docId].name);\n    // console.log(docs[docId].content);\n    let x = \"a\"; // Skriv ut x i editorn\n\n    setData(x); // När jag valt ett dokument ska data inte vara '' längre\n\n    console.log(data); // var tr = document.getElementById(\"trixEditorContent\");\n    // tr.innerHTML = data;\n    // trixEditorRef.innerHTML = data;\n    //UPPDATERA DATA I EDITORN AUTOMATISKT\n    // setData(ReactHtmlParser(data)[0]);\n\n    setValue(data); // return;\n    // trixRef.current.value = data;\n  };\n\n  const printData = () => {\n    // console.log(\"skriv ut i konsollen\");\n    // if (ReactHtmlParser(data)[0].props !== undefined) {\n    //     console.log( ReactHtmlParser(data)[0].props.children ); // ger en array med objekt i\n    // }\n    // for (let row in  ReactHtmlParser(data)[0].props.children[row]) {\n    // \\filtrera ut element (br mm ?\n    //     console.log(row);\n    // }\n    if (data !== undefined) {\n      console.log(data);\n    }\n\n    ;\n  };\n\n  const createObject = async () => {\n    // console.log( \"skapa objekt\" );\n    console.log(data); //, name =? hur bestämmer man det? \n    // öppna ett formulär där man får fylla i namn?\n    //  inte ha med namn när man skapar ett dokument utan ta med det när man vill spara sen? \n    //??????????????????????????????????????????????? name = ?????????\n    // data = {name: \"hej\", html: data};\n\n    data = {\n      html: data\n    };\n    await docsModel.create(data);\n  };\n\n  const updateObject = () => {\n    console.log(\"uppdatera objekt\"); // await docsModel.update();\n  };\n\n  const saveObject = () => {\n    console.log(\"spara objekt\");\n  }; // // function handleChange(e, editor) {\n  // let handleChange = (e, editor) => { \n  //     // setData(editor.getData());\n  //     setData(e+e);\n  // }\n  // let handleEditor = (e, editor) => { \n  //     // setData(editor.getData());\n  //     setData(\"nytt\");\n  // }\n  // handleEditorReady(editor) {\n  //     // this is a reference back to the editor if you want to\n  //     // do editing programatically\n  //     editor.insertString(\"editor is ready\");\n  //   };\n  //  function  handleChange(html, text) {\n  // //     // html is the new html content\n  // //     // text is the new text content\n  //   };\n  //   render() {\n\n\n  let onChange = (event, newValue) => {\n    // console.log(event); // hela html\n    // console.log(event.target); // De använde event.target.value\n    // console.log(newValue);\n    // setData(newValue);\n    setData(event); // console.log(trixEditorRef.current);\n  };\n\n  let onEditorReady = (event, newValue) => {// console.log(event, newValue);\n    // trixRef.innerHTML = data;\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"editor\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Text editor\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"trix-toolbar\", {\n      id: \"trix-toolbar\",\n      children: [/*#__PURE__*/_jsxDEV(\"select\", {\n        id: \"selectDoc\",\n        onChange: fetchDoc,\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"-99\",\n          children: \"Choose a document\"\n        }, \"0\", false, {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 21\n        }, this), docs.map((doc, index) => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: index,\n          children: doc.name\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 47\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => createObject(),\n        children: \" Create \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => updateObject(),\n        children: \" Update \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => printData(),\n        children: \" Print \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(TrixEditor, {\n      id: \"trixEditorContent\",\n      className: \"trix-editor\",\n      toolbar: \"trix-toolbar\",\n      onEditorReady: onEditorReady // onChange = {(event, editor) => {onChange(event, editor) }}\n      ,\n      onChange: onChange,\n      ref: trixRef,\n      value: data // value = { trixRef.current.value }\n\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 119,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Editor, \"vBob70XjQJWU4rmuZrPMbAM3iPo=\");\n\n_c = Editor;\nexport default Editor;\n\nvar _c;\n\n$RefreshReg$(_c, \"Editor\");","map":{"version":3,"names":["React","useState","useEffect","useRef","ReactHtmlParser","TrixEditor","docsModel","Editor","data","setData","docs","setDocs","currentDoc","setCurrentDoc","trixRef","allDocs","getAllDocs","fetchDoc","x","console","log","setValue","printData","undefined","createObject","html","create","updateObject","saveObject","onChange","event","newValue","onEditorReady","map","doc","index","name"],"sources":["C:/Users/asa_h/Desktop/bth/jsramverk/frontend/texteditor/src/components/Editor.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport ReactHtmlParser from 'react-html-parser';\n// import ReactHtmlParser, { processNodes, convertNodeToElement, htmlparser2 } from 'react-html-parser';\nimport { TrixEditor } from \"react-trix\";\nimport docsModel from '../models/docs';\n\nconst Editor = () => {\n    let [data, setData] = useState('');\n    const [docs, setDocs] = useState([]);\n    const [currentDoc, setCurrentDoc] = useState({});\n    const trixRef = useRef(null);\n    // const myRef = React.createRef();\n\n    useEffect(() => {\n        (async () => {\n            const allDocs = await docsModel.getAllDocs();\n            setDocs(allDocs);\n        })();\n    }, [currentDoc]);\n\n    let fetchDoc = () => {\n        // console.log(\"hämta valt dokument och visa det i editorn\");\n        // var docId = document.getElementById(\"selectDoc\").value;\n        // console.log(docId);\n        // console.log(docs[docId]);\n        // console.log(docs[docId]._id);\n        // console.log(docs[docId].name);\n        // console.log(docs[docId].content);\n\n        let x = \"a\";\n        // Skriv ut x i editorn\n\n        setData(x);\n        // När jag valt ett dokument ska data inte vara '' längre\n        console.log(data);\n        // var tr = document.getElementById(\"trixEditorContent\");\n        // tr.innerHTML = data;\n        // trixEditorRef.innerHTML = data;\n        //UPPDATERA DATA I EDITORN AUTOMATISKT\n        // setData(ReactHtmlParser(data)[0]);\n        setValue(data);\n        // return;\n        // trixRef.current.value = data;\n\n    }\n\n    const printData = () => { \n        // console.log(\"skriv ut i konsollen\");\n        // if (ReactHtmlParser(data)[0].props !== undefined) {\n        //     console.log( ReactHtmlParser(data)[0].props.children ); // ger en array med objekt i\n        // }\n        // for (let row in  ReactHtmlParser(data)[0].props.children[row]) {\n            // \\filtrera ut element (br mm ?\n        //     console.log(row);\n        // }\n        if (data !== undefined) {\n            console.log(data);\n        };\n    };\n\n    const createObject = async () => {\n        // console.log( \"skapa objekt\" );\n        console.log(data);//, name =? hur bestämmer man det? \n        // öppna ett formulär där man får fylla i namn?\n        //  inte ha med namn när man skapar ett dokument utan ta med det när man vill spara sen? \n        //??????????????????????????????????????????????? name = ?????????\n        // data = {name: \"hej\", html: data};\n        data = {html: data};\n        await docsModel.create(data);\n    };\n\n    const updateObject = () => { \n        console.log( \"uppdatera objekt\" );\n        // await docsModel.update();\n    };\n\n    const saveObject = () => { \n        console.log( \"spara objekt\" );\n    };\n\n    // // function handleChange(e, editor) {\n    // let handleChange = (e, editor) => { \n    //     // setData(editor.getData());\n    //     setData(e+e);\n    // }\n\n    // let handleEditor = (e, editor) => { \n    //     // setData(editor.getData());\n    //     setData(\"nytt\");\n    // }\n\n    // handleEditorReady(editor) {\n    //     // this is a reference back to the editor if you want to\n    //     // do editing programatically\n    //     editor.insertString(\"editor is ready\");\n    //   };\n    //  function  handleChange(html, text) {\n    // //     // html is the new html content\n    // //     // text is the new text content\n    //   };\n\n    //   render() {\n\n    let onChange = (event, newValue) => { \n        // console.log(event); // hela html\n        // console.log(event.target); // De använde event.target.value\n        // console.log(newValue);\n        // setData(newValue);\n        setData(event);\n        // console.log(trixEditorRef.current);\n    }\n\n    let onEditorReady = (event, newValue) => { \n        // console.log(event, newValue);\n        // trixRef.innerHTML = data;\n    }\n\n    return (\n        <div className=\"editor\">\n            <h1>Text editor</h1>\n\n            <trix-toolbar id=\"trix-toolbar\">\n                <select id = \"selectDoc\" onChange={ fetchDoc }>\n                    {/* console.log(docs); */}\n                    <option value=\"-99\" key=\"0\">Choose a document</option>\n                    {docs.map((doc, index) => <option value={index} key={index}>{doc.name}</option>)}\n                </select>\n                <button onClick = {()=> createObject() }> Create </button>\n                <button onClick = {()=> updateObject() }> Update </button>\n                <button onClick = {()=> printData() }> Print </button>\n                {/* <button onClick = {()=> saveObject() }> Save </button> */} \n            </trix-toolbar>\n\n            <TrixEditor id = \"trixEditorContent\" className=\"trix-editor\" toolbar=\"trix-toolbar\"\n                onEditorReady = { onEditorReady }\n                // onChange = {(event, editor) => {onChange(event, editor) }}\n                onChange = { onChange } \n                ref = { trixRef }\n                value = { data }\n                // value = { trixRef.current.value }\n            />\n        </div>\n    )\n}\n\nexport default Editor\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}