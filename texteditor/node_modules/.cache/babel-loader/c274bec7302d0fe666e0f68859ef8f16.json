{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\asa_h\\\\Desktop\\\\bth\\\\jsramverk\\\\frontend\\\\texteditor\\\\src\\\\components\\\\Editor.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport ReactHtmlParser from 'react-html-parser'; // import ReactHtmlParser, { processNodes, convertNodeToElement, htmlparser2 } from 'react-html-parser';\n\nimport { TrixEditor } from \"react-trix\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Editor = () => {\n  _s();\n\n  const [data, setData] = useState(''); // Första elementet av denna komponents state är nuvarande state, andra funktionen som uppdaterar tillståndet. Från början är tillståndet '', dvs ingen text\n\n  const printData = () => {\n    // console.log( ReactHtmlParser(data) ); // ger utskrift i konsollen med t ex <p>, </p> osv\n    console.log(ReactHtmlParser(data)[0].props.children[3]); // ger en array med objekt i\n  };\n\n  const handleChange = (e, editor) => {\n    // setData(editor.getData());\n    setData(e);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"editor\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Text editor\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(TrixEditor, {\n      className: \"trix\",\n      onChange: (e, editor) => {\n        handleChange(e, editor);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => printData(),\n      children: \" Save \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 12\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 9\n  }, this); // }\n};\n\n_s(Editor, \"C23+RLRwI6JvI86s3uCPD/CulQc=\");\n\n_c = Editor;\nexport default Editor; // handleEditorReady(editor) {\n//     // this is a reference back to the editor if you want to\n//     // do editing programatically\n//     editor.insertString(\"editor is ready\");\n//   };\n//  function  handleChange(html, text) {\n// //     // html is the new html content\n// //     // text is the new text content\n//   };\n//   render() {\n\nvar _c;\n\n$RefreshReg$(_c, \"Editor\");","map":{"version":3,"names":["React","useState","ReactHtmlParser","TrixEditor","Editor","data","setData","printData","console","log","props","children","handleChange","e","editor"],"sources":["C:/Users/asa_h/Desktop/bth/jsramverk/frontend/texteditor/src/components/Editor.js"],"sourcesContent":["import React, { useState } from 'react';\nimport ReactHtmlParser from 'react-html-parser';\n// import ReactHtmlParser, { processNodes, convertNodeToElement, htmlparser2 } from 'react-html-parser';\nimport { TrixEditor } from \"react-trix\";\n\n\nconst Editor = () => {\n    const [data, setData] = useState('');// Första elementet av denna komponents state är nuvarande state, andra funktionen som uppdaterar tillståndet. Från början är tillståndet '', dvs ingen text\n\n    const printData = () => { \n        // console.log( ReactHtmlParser(data) ); // ger utskrift i konsollen med t ex <p>, </p> osv\n        console.log( ReactHtmlParser(data)[0].props.children[3] ); // ger en array med objekt i\n    };\n\n    const handleChange = (e, editor) => { \n        // setData(editor.getData());\n        setData(e);\n    }\n\n    return (\n        <div id=\"editor\">\n        <h1>Text editor</h1>\n           \n        {/* <TrixEditor onChange={this.handleChange} onEditorReady={this.handleEditorReady} /> */}\n        <TrixEditor className=\"trix\" \n            onChange = {(e, editor) => { handleChange(e, editor) }} \n            />\n        \n           <button onClick = {()=> printData() }> Save </button>\n\n        </div>\n    )\n        // }\n}\n\nexport default Editor\n\n    // handleEditorReady(editor) {\n    //     // this is a reference back to the editor if you want to\n    //     // do editing programatically\n    //     editor.insertString(\"editor is ready\");\n    //   };\n    //  function  handleChange(html, text) {\n    // //     // html is the new html content\n    // //     // text is the new text content\n    //   };\n\n    //   render() {"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,eAAP,MAA4B,mBAA5B,C,CACA;;AACA,SAASC,UAAT,QAA2B,YAA3B;;;AAGA,MAAMC,MAAM,GAAG,MAAM;EAAA;;EACjB,MAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBL,QAAQ,CAAC,EAAD,CAAhC,CADiB,CACoB;;EAErC,MAAMM,SAAS,GAAG,MAAM;IACpB;IACAC,OAAO,CAACC,GAAR,CAAaP,eAAe,CAACG,IAAD,CAAf,CAAsB,CAAtB,EAAyBK,KAAzB,CAA+BC,QAA/B,CAAwC,CAAxC,CAAb,EAFoB,CAEuC;EAC9D,CAHD;;EAKA,MAAMC,YAAY,GAAG,CAACC,CAAD,EAAIC,MAAJ,KAAe;IAChC;IACAR,OAAO,CAACO,CAAD,CAAP;EACH,CAHD;;EAKA,oBACI;IAAK,EAAE,EAAC,QAAR;IAAA,wBACA;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QADA,eAIA,QAAC,UAAD;MAAY,SAAS,EAAC,MAAtB;MACI,QAAQ,EAAI,CAACA,CAAD,EAAIC,MAAJ,KAAe;QAAEF,YAAY,CAACC,CAAD,EAAIC,MAAJ,CAAZ;MAAyB;IAD1D;MAAA;MAAA;MAAA;IAAA,QAJA,eAQG;MAAQ,OAAO,EAAI,MAAKP,SAAS,EAAjC;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QARH;EAAA;IAAA;IAAA;IAAA;EAAA,QADJ,CAbiB,CA0Bb;AACP,CA3BD;;GAAMH,M;;KAAAA,M;AA6BN,eAAeA,MAAf,C,CAEI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA"},"metadata":{},"sourceType":"module"}