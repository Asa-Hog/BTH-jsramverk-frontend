{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\asa_h\\\\Desktop\\\\bth\\\\jsramverk\\\\frontend\\\\texteditor\\\\src\\\\components\\\\Editor.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport ReactHtmlParser from 'react-html-parser'; // import ReactHtmlParser, { processNodes, convertNodeToElement, htmlparser2 } from 'react-html-parser';\n\nimport { TrixEditor } from \"react-trix\";\nimport docs from '../models/docs';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Editor = () => {\n  _s();\n\n  const [docs, setDocs] = useState([]);\n  useEffect(() => {\n    (async () => {\n      const allDocs = await docs.getAllDocs();\n      setDocs(allDocs);\n    })();\n  }, []);\n  const [data, setData] = useState(''); // Från början är data '' (?) // Första elementet av denna komponents state är nuvarande state, andra funktionen som uppdaterar tillståndet. Från början är tillståndet '' - ingen text\n\n  const printData = () => {\n    console.log(ReactHtmlParser(data)[0].props.children); // ger en array med objekt i\n    // for (let row in  ReactHtmlParser(data)[0].props.children[row]) {\n    // \\filtrera ut element (br mm ?\n    //     console.log(row);\n    // }\n  }; // function handleChange(e, editor) {\n\n\n  let handleChange = (e, editor) => {\n    // setData(editor.getData());\n    setData(e + e);\n  };\n\n  let handleEditor = (e, editor) => {\n    // setData(editor.getData());\n    setData(e + e);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"editor\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Text editor\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"trix-toolbar\", {\n      id: \"trix-toolbar\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => printData(),\n        children: \" Save \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(TrixEditor, {\n      className: \"trix-editor\",\n      toolbar: \"trix-toolbar\" // onChange={this.handleChange}\n      // onEditorReady={this.handleEditorReady}\n      ,\n      onEditorReady: (e, editor) => {\n        handleEditor(e, editor);\n      },\n      onChange: (e, editor) => {\n        handleChange(e, editor);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Editor, \"Ma2wvsBm2EpWm6lTbYW5/feFEKU=\");\n\n_c = Editor;\nexport default Editor; // handleEditorReady(editor) {\n//     // this is a reference back to the editor if you want to\n//     // do editing programatically\n//     editor.insertString(\"editor is ready\");\n//   };\n//  function  handleChange(html, text) {\n// //     // html is the new html content\n// //     // text is the new text content\n//   };\n//   render() {\n\nvar _c;\n\n$RefreshReg$(_c, \"Editor\");","map":{"version":3,"names":["React","useState","ReactHtmlParser","TrixEditor","docs","Editor","setDocs","useEffect","allDocs","getAllDocs","data","setData","printData","console","log","props","children","handleChange","e","editor","handleEditor"],"sources":["C:/Users/asa_h/Desktop/bth/jsramverk/frontend/texteditor/src/components/Editor.js"],"sourcesContent":["import React, { useState } from 'react';\nimport ReactHtmlParser from 'react-html-parser';\n// import ReactHtmlParser, { processNodes, convertNodeToElement, htmlparser2 } from 'react-html-parser';\nimport { TrixEditor } from \"react-trix\";\nimport docs from '../models/docs';\n\n\nconst Editor = () => {\n\n    const [docs, setDocs] = useState([]);\n\n    useEffect(() => {\n        (async () => {\n            const allDocs = await docs.getAllDocs();\n            setDocs(allDocs);\n        })();\n    }, []);\n\n\n\n\n\n\n    const [data, setData] = useState('');// Från början är data '' (?) // Första elementet av denna komponents state är nuvarande state, andra funktionen som uppdaterar tillståndet. Från början är tillståndet '' - ingen text\n\n    const printData = () => { \n        console.log( ReactHtmlParser(data)[0].props.children ); // ger en array med objekt i\n\n        // for (let row in  ReactHtmlParser(data)[0].props.children[row]) {\n            // \\filtrera ut element (br mm ?\n        //     console.log(row);\n        // }\n    };\n\n    // function handleChange(e, editor) {\n    let handleChange = (e, editor) => { \n        // setData(editor.getData());\n        setData(e+e);\n    }\n\n    let handleEditor = (e, editor) => { \n        // setData(editor.getData());\n        setData(e+e);\n    }\n\n    return (\n        <div className=\"editor\">\n            <h1>Text editor</h1>\n\n            {/* Det här är bara en knapp, vi ska använda ett toolbar-element (?) */}\n            {/* <button onClick = {()=> printData() }> Save </button> */}\n\n            <trix-toolbar id=\"trix-toolbar\">\n                <button onClick = {()=> printData() }> Save </button>\n            </trix-toolbar>\n\n            {/* <select\n                onChange={fetchDoc}\n            >\n                <option value=\"-99\" key=\"0\">Choose a document</option>\n                {docs.map((doc, index) => <option value={index} key={index}>{doc.name}</option>)}\n            </select> */}\n\n            {/* <trix-editor input=\"input_id\" toolbar=\"trix-toolbar\"></trix-editor>\n            <input type=\"hidden\" id=\"input_id\" /> */}\n\n\n            <TrixEditor className=\"trix-editor\" toolbar=\"trix-toolbar\"\n                // onChange={this.handleChange}\n                // onEditorReady={this.handleEditorReady}\n                onEditorReady={(e, editor) => { handleEditor(e, editor) }}\n                onChange = {(e, editor) => { handleChange(e, editor) }}\n                />\n\n        </div>\n    )\n}\n\nexport default Editor\n\n    // handleEditorReady(editor) {\n    //     // this is a reference back to the editor if you want to\n    //     // do editing programatically\n    //     editor.insertString(\"editor is ready\");\n    //   };\n    //  function  handleChange(html, text) {\n    // //     // html is the new html content\n    // //     // text is the new text content\n    //   };\n\n    //   render() {"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,eAAP,MAA4B,mBAA5B,C,CACA;;AACA,SAASC,UAAT,QAA2B,YAA3B;AACA,OAAOC,IAAP,MAAiB,gBAAjB;;;AAGA,MAAMC,MAAM,GAAG,MAAM;EAAA;;EAEjB,MAAM,CAACD,IAAD,EAAOE,OAAP,IAAkBL,QAAQ,CAAC,EAAD,CAAhC;EAEAM,SAAS,CAAC,MAAM;IACZ,CAAC,YAAY;MACT,MAAMC,OAAO,GAAG,MAAMJ,IAAI,CAACK,UAAL,EAAtB;MACAH,OAAO,CAACE,OAAD,CAAP;IACH,CAHD;EAIH,CALQ,EAKN,EALM,CAAT;EAYA,MAAM,CAACE,IAAD,EAAOC,OAAP,IAAkBV,QAAQ,CAAC,EAAD,CAAhC,CAhBiB,CAgBoB;;EAErC,MAAMW,SAAS,GAAG,MAAM;IACpBC,OAAO,CAACC,GAAR,CAAaZ,eAAe,CAACQ,IAAD,CAAf,CAAsB,CAAtB,EAAyBK,KAAzB,CAA+BC,QAA5C,EADoB,CACoC;IAExD;IACI;IACJ;IACA;EACH,CAPD,CAlBiB,CA2BjB;;;EACA,IAAIC,YAAY,GAAG,CAACC,CAAD,EAAIC,MAAJ,KAAe;IAC9B;IACAR,OAAO,CAACO,CAAC,GAACA,CAAH,CAAP;EACH,CAHD;;EAKA,IAAIE,YAAY,GAAG,CAACF,CAAD,EAAIC,MAAJ,KAAe;IAC9B;IACAR,OAAO,CAACO,CAAC,GAACA,CAAH,CAAP;EACH,CAHD;;EAKA,oBACI;IAAK,SAAS,EAAC,QAAf;IAAA,wBACI;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QADJ,eAMI;MAAc,EAAE,EAAC,cAAjB;MAAA,uBACI;QAAQ,OAAO,EAAI,MAAKN,SAAS,EAAjC;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IADJ;MAAA;MAAA;MAAA;IAAA,QANJ,eAqBI,QAAC,UAAD;MAAY,SAAS,EAAC,aAAtB;MAAoC,OAAO,EAAC,cAA5C,CACI;MACA;MAFJ;MAGI,aAAa,EAAE,CAACM,CAAD,EAAIC,MAAJ,KAAe;QAAEC,YAAY,CAACF,CAAD,EAAIC,MAAJ,CAAZ;MAAyB,CAH7D;MAII,QAAQ,EAAI,CAACD,CAAD,EAAIC,MAAJ,KAAe;QAAEF,YAAY,CAACC,CAAD,EAAIC,MAAJ,CAAZ;MAAyB;IAJ1D;MAAA;MAAA;MAAA;IAAA,QArBJ;EAAA;IAAA;IAAA;IAAA;EAAA,QADJ;AA+BH,CArED;;GAAMd,M;;KAAAA,M;AAuEN,eAAeA,MAAf,C,CAEI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA"},"metadata":{},"sourceType":"module"}